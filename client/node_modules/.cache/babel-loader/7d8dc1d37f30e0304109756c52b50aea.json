{"remainingRequest":"/opt/client/node_modules/babel-loader/lib/index.js!/opt/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/opt/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/client/src/components/admin/manageItems.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/client/src/components/admin/manageItems.vue","mtime":1582320098836},{"path":"/opt/client/node_modules/cache-loader/dist/cjs.js","mtime":1582320095676},{"path":"/opt/client/node_modules/babel-loader/lib/index.js","mtime":1582320095572},{"path":"/opt/client/node_modules/cache-loader/dist/cjs.js","mtime":1582320095676},{"path":"/opt/client/node_modules/vue-loader/lib/index.js","mtime":1582320098604}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/opt/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport DBService from \"../DBService\"; // import {__vlsIterationHelper} from '../../../vue-temp/vue-editor-bridge';\n// import TodoItem from './TodoItem.vue';\n\nexport default {\n  name: 'ManageItems',\n  components: {},\n  data: function data() {\n    return {\n      //                            Items: [],  \n      newItemText: \"\",\n      //   Abteilungen: [],\n      //  Processors: [],\n      selectedDepartment: \"\",\n      selectedProcessor: \"\",\n      selectedType: \"\",\n      newItemChooseOptions: \"\"\n    };\n  },\n  props: {\n    msg: String\n  },\n  created: function created() {},\n  methods: {\n    AddItem: function () {\n      var _AddItem = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _NewItem;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.selectedDepartment) this.selectedDepartment = 1;\n\n                if (this.selectedType == \"Choose\") {\n                  this.selectedType = \"Choose:\" + this.newItemChooseOptions;\n                }\n\n                if (!(this.selectedType == \"\" || this.selectedProcessor == \"\")) {\n                  _context.next = 6;\n                  break;\n                }\n\n                alert(\"Error: no type or Processor choosen\");\n                _context.next = 9;\n                break;\n\n              case 6:\n                _NewItem = {\n                  newItemText: this.newItemText,\n                  selectedDepartment: this.selectedDepartment,\n                  selectedProcessor: this.selectedProcessor,\n                  selectedType: this.selectedType,\n                  newItemChooseOptions: this.newItemChooseOptions\n                };\n                _context.next = 9;\n                return DBService.DBAddItem(_NewItem).then(function () {\n                  return _this.$parent.updateAll();\n                }).then(function () {\n                  _this.newItemText = \"\";\n                  _this.selectedDepartment = \"\";\n                  _this.selectedProcessor = \"\";\n                  _this.selectedType = \"\";\n                  _this.newItemChooseOptions = \"\";\n                }).catch(function (error) {\n                  return alert(\"Server returned an Error:\\n\" + error.response.data);\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function AddItem() {\n        return _AddItem.apply(this, arguments);\n      }\n\n      return AddItem;\n    }(),\n    toggleItem: function () {\n      var _toggleItem = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(id, enabled) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return DBService.toggleEntry(\"Items\", id, enabled);\n\n              case 2:\n                //this.updateAllData()\n                this.$parent.updateAll();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function toggleItem(_x, _x2) {\n        return _toggleItem.apply(this, arguments);\n      }\n\n      return toggleItem;\n    }()\n  }\n};",{"version":3,"sources":["manageItems.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA,OAAA,SAAA,qB,CACA;AACA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,UAAA,EAAA,EAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA;AACA,MAAA,WAAA,EAAA,EAFA;AAGA;AACA;AACA,MAAA,kBAAA,EAAA,EALA;AAMA,MAAA,iBAAA,EAAA,EANA;AAOA,MAAA,YAAA,EAAA,EAPA;AAQA,MAAA,oBAAA,EAAA;AARA,KAAA;AAUA,GAdA;AAeA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GAfA;AAkBA,EAAA,OAlBA,qBAkBA,CAEA,CApBA;AAqBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAA,CAAA,KAAA,kBAAA,EACA,KAAA,kBAAA,GAAA,CAAA;;AAEA,oBAAA,KAAA,YAAA,IAAA,QAAA,EAAA;AACA,uBAAA,YAAA,GAAA,YAAA,KAAA,oBAAA;AACA;;AAPA,sBASA,KAAA,YAAA,IAAA,EAAA,IAAA,KAAA,iBAAA,IAAA,EATA;AAAA;AAAA;AAAA;;AAUA,gBAAA,KAAA,CAAA,qCAAA,CAAA;AAVA;AAAA;;AAAA;AAcA,gBAAA,QAdA,GAcA;AACA,kBAAA,WAAA,EAAA,KAAA,WADA;AAEA,kBAAA,kBAAA,EAAA,KAAA,kBAFA;AAGA,kBAAA,iBAAA,EAAA,KAAA,iBAHA;AAIA,kBAAA,YAAA,EAAA,KAAA,YAJA;AAKA,kBAAA,oBAAA,EAAA,KAAA;AALA,iBAdA;AAAA;AAAA,uBAsBA,SAAA,CACA,SADA,CACA,QADA,EAEA,IAFA,CAEA;AAAA,yBAAA,KAAA,CAAA,OAAA,CAAA,SAAA,EAAA;AAAA,iBAFA,EAGA,IAHA,CAGA,YAAA;AACA,kBAAA,KAAA,CAAA,WAAA,GAAA,EAAA;AACA,kBAAA,KAAA,CAAA,kBAAA,GAAA,EAAA;AACA,kBAAA,KAAA,CAAA,iBAAA,GAAA,EAAA;AACA,kBAAA,KAAA,CAAA,YAAA,GAAA,EAAA;AACA,kBAAA,KAAA,CAAA,oBAAA,GAAA,EAAA;AACA,iBATA,EAUA,KAVA,CAUA,UAAA,KAAA;AAAA,yBAAA,KAAA,CAAA,gCAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA;AAAA,iBAVA,CAtBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoCA,IAAA,UApCA;AAAA;AAAA;AAAA,gDAoCA,EApCA,EAoCA,OApCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAqCA,SAAA,CAAA,WAAA,CAAA,OAAA,EAAA,EAAA,EAAA,OAAA,CArCA;;AAAA;AAsCA;AACA,qBAAA,OAAA,CAAA,SAAA;;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBA,CAAA","sourcesContent":["<template>\r\n\r\n    <div class=\"ManageItems\">\r\n\r\n        <!-- <h1> {{msg}} </h1> -->\r\n        <section class=\"form\">\r\n            <input class=\"form-control\" v-model=\"newItemText\" placeholder=\"Item-Text\"/>\r\n            Abteilung, für die das Item verfügbar ist ( ALL = Alle Abteilungen):\r\n            <select\r\n                name=\"NewItemDepartment\"\r\n                v-model=\"selectedDepartment\"                 \r\n                 @click=\"this.$parent.updateAll()\"              \r\n                class=\"btn btn-secondary dropdown-toggle\">\r\n                <!-- <option :value=\"comp.id\">{{comp.id}} </option> -->                \r\n                <option v-for=\"dep in this.$parent.Abteilungen\" v-bind:key=\"dep.id\" :value=\"dep.id\" v-if=\"dep.enabled===1\">{{dep.name}}\r\n                </option>\r\n            </select>\r\n            <br>\r\n                Bearbeitende Abteilung:\r\n                <select\r\n                    name=\"NewItemProcessor\"\r\n                    v-model=\"selectedProcessor\"                       \r\n                     @click=\"this.$parent.updateAll()\"                 \r\n                    class=\"btn btn-secondary dropdown-toggle\">\r\n                    <!-- <option :value=\"comp.id\">{{comp.id}} </option> -->\r\n                    <option v-for=\"proc in this.$parent.Processors\" v-bind:key=\"proc.id\" :value=\"proc.id\" v-if=\"proc.enabled===1\">{{proc.name}}\r\n                    </option>\r\n                </select>\r\n                <br>\r\n                    Typ des Items:\r\n                    <select\r\n                        name=\"NewItemType\"\r\n                        v-model=\"selectedType\"\r\n                        class=\"btn btn-secondary dropdown-toggle\">\r\n                        <!-- <option :value=\"comp.id\">{{comp.id}} </option> -->\r\n                        <option >CheckBox</option>\r\n                        <option >Choose</option>\r\n                        <option >Text</option>\r\n                    </select>\r\n                    <input\r\n                        v-if=\"selectedType === 'Choose'\"\r\n                        class=\"form-control\"\r\n                        v-model=\"newItemChooseOptions\"\r\n                        placeholder=\"Optionen, die zur Auswahl stehen. ( Eins;Zwei;Drei; )\"/>\r\n\r\n                    <br>\r\n                        <button type=\"button\" class=\"btn btn-success\" @click='AddItem'>Item anlegen</button>\r\n                        <hr/>\r\n                        <div >\r\n                            <table class=\"table  table-striped table-dark\">\r\n                                <thead class=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th scope=\"col\">Item</th>\r\n                                        <th scope=\"col\">Abteilung</th>\r\n                                        <th scope=\"col\">Bearbeiter</th>\r\n                                        <th scope=\"col\">Type/Value</th>\r\n                                        <th scope=\"col\">(de-)aktivieren</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody >\r\n                                    <tr v-for=\"item in this.$parent.Items\" v-bind:key=\"item.id\">\r\n                                        <template v-if=\"item.enabled === 1\">\r\n                                            <td>{{item.Text}}</td>\r\n                                            <td>{{item.DepId}}</td>\r\n                                            <td>{{item.ProcessorId}}</td>\r\n                                            <td>{{item.ItemType}}</td>\r\n                                            <td align=\"right\">\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    class=\"btn-disable\"\r\n                                                    @click='toggleItem(item.id, item.enabled)'>disable</button>\r\n                                            </td>\r\n                                        </template>\r\n                                        <template v-if=\"item.enabled === 0\">\r\n                                            <td class=\"disabledColumn\">{{item.Text}}</td>\r\n                                            <td class=\"disabledColumn\">{{item.DepId}}</td>\r\n                                            <td class=\"disabledColumn\">{{item.ProcessorId}}</td>\r\n                                            <td class=\"disabledColumn\">{{item.ItemType}}</td>\r\n                                            <td class=\"disabledColumn\" align=\"right\">\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    class=\"btn-enable\"\r\n                                                    @click='toggleItem(item.id, item.enabled)'>Enable</button>\r\n                                            </td>\r\n                                        </template>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </section>\r\n\r\n                </div>\r\n            </template>\r\n\r\n            <script>\r\n                import DBService from '../DBService';\r\n                // import {__vlsIterationHelper} from '../../../vue-temp/vue-editor-bridge';\r\n                // import TodoItem from './TodoItem.vue';\r\n                export default {\r\n                    name: 'ManageItems',\r\n                    components: {},\r\n                    data() {\r\n                        return {\r\n//                            Items: [],  \r\n                            newItemText: \"\",\r\n                         //   Abteilungen: [],\r\n                          //  Processors: [],\r\n                            selectedDepartment: \"\",\r\n                            selectedProcessor: \"\",\r\n                            selectedType: \"\",\r\n                            newItemChooseOptions: \"\"\r\n                        }\r\n                    },\r\n                    props: {\r\n                        msg: String\r\n                    },\r\n                    created() {\r\n                        \r\n                    },\r\n                    methods: {\r\n                       async AddItem() {\r\n                            if (!this.selectedDepartment) \r\n                                this.selectedDepartment = 1;\r\n                            \r\n                            if (this.selectedType == \"Choose\") {\r\n                                this.selectedType = \"Choose:\" + this.newItemChooseOptions;\r\n                            }\r\n\r\n                            if (this.selectedType == \"\" || this.selectedProcessor == \"\") {\r\n                                alert(\"Error: no type or Processor choosen\")\r\n                            } else {\r\n                                \r\n\r\n                            const _NewItem = {\r\n                                newItemText: this.newItemText, \r\n                                selectedDepartment: this.selectedDepartment,\r\n                                selectedProcessor: this.selectedProcessor,\r\n                                selectedType: this.selectedType,\r\n                                newItemChooseOptions: this.newItemChooseOptions\r\n                            };\r\n\r\n                            await DBService\r\n                                .DBAddItem(_NewItem)\r\n                                .then (() => this.$parent.updateAll())\r\n                                .then (() => {\r\n                                    this.newItemText = \"\";\r\n                                    this.selectedDepartment = \"\";\r\n                                    this.selectedProcessor = \"\";\r\n                                    this.selectedType = \"\";\r\n                                    this.newItemChooseOptions = \"\";\r\n                                })\r\n                                .catch((error) => alert((\"Server returned an Error:\\n\" + error.response.data)));                                \r\n                            }\r\n                        },\r\n\r\n                        async toggleItem(id, enabled) {\r\n                            await DBService.toggleEntry(\"Items\", id, enabled);\r\n                            //this.updateAllData()\r\n                            this.$parent.updateAll();\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            </script>\r\n\r\n            <!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n            <style scoped=\"scoped\">\r\n\r\n\r\n                div.container {\r\n                    max-width: 90%;\r\n\r\n                }\r\n\r\n                p.error {\r\n                    border: 1px solid #ff5b5f;\r\n                    background-color: #ffc5c1;\r\n                    padding: 10px;\r\n                    margin-bottom: 15px;\r\n                }\r\n\r\n                div.entryRow {\r\n                    position: relative;\r\n                    border: 1px solid #5bd658;\r\n                    background-color: #bcffb8;\r\n                    padding: 10px 10px 1px;\r\n                    margin-bottom: 0;\r\n                }\r\n\r\n                div.created-at {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    padding: 5px 15px;\r\n                    background-color: darkgreen;\r\n                    color: white;\r\n                    font-size: 13px;\r\n                }\r\n\r\n                p.text {\r\n                    font-size: 22px;\r\n                    font-weight: 700;\r\n                    margin-bottom: 0;\r\n                }\r\n\r\n                p.smalltext {\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    margin-bottom: 0;\r\n                }\r\n                /* table {\r\n                                      width: 100%;\r\n                                      text-align: left;\r\n                                      border: 1px solid black;\r\n                                      border-collapse: collapse;\r\n                                           \r\n                                    }\r\n                                    th {\r\n                                      padding: 5px;\r\n                                      font-weight: 700;\r\n                                      border: 1px solid black;\r\n                                      vertical-align: middle;\r\n                                    } */\r\n                td {\r\n                    padding: 4px;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    margin-bottom: 0;\r\n                    border: 1px solid black;\r\n                    vertical-align: middle;\r\n                    align: left;\r\n                }\r\n                .btn-disable {\r\n                    background-color: rgb(53, 53, 53);\r\n                    color: rgb(236, 48, 48);\r\n                    border: 2px solid rgb(179, 7, 7);\r\n                    /* Green */\r\n                }\r\n                .btn-enable {\r\n                    background-color: rgb(53, 53, 53);\r\n                    color: rgb(124, 223, 148);\r\n                    border: 2px solid rgb(0, 145, 43);\r\n                    /* Green */\r\n                }\r\n            </style>"],"sourceRoot":"src/components/admin"}]}